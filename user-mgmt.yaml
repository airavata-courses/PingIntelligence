apiVersion: apps/v1           # API version
kind: Deployment              # Type of kubernetes resource
metadata:
  name: user-mgmt    # Name of the kubernetes resource
  labels:                     # Labels that will be applied to this resource
    app: user-mgmt
spec:
  replicas: 4                 # No. of replicas/pods to run in this deployment
  selector:
    matchLabels:              # The deployment applies to any pods mayching the specified labels
      app: user-mgmt
  template:                   # Template for creating the pods in this deployment
    metadata:
      labels:                 # Labels that will be applied to each Pod in this deployment
        app: user-mgmt
    spec:
      restartPolicy: Always                     # Spec for the containers that will be run in the Pods
      containers:
      - name: user-mgmt
        image: pingintelligence/user-mgmt-image:latest
        imagePullPolicy: Always
        ports:
          - name: http
            containerPort: 8091 # The port that the container exposes
          #command: ["/bin/sh", "-ec", "while :;do echo '.'; sleep 5; done"]
        # resources:
        #   limits:
        #     cpu: 0.2
        #     memory: "200Mi"
        env:                  # Environment variables supplied to the Pod
        - name: SPRING_DATASOURCE_USERNAME # Name of the environment variable
          value: root
        - name: SPRING_DATASOURCE_PASSWORD
          value: root@123
        - name: SPRING_DATASOURCE_URL
          value: jdbc:mysql://mysql-user-mgmt.default:3306/UserManagement?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false&autoReconnect=true&allowPublicKeyRetrieval=true
---
apiVersion: v1                # API version
kind: Service                 # Type of the kubernetes resource
metadata:                     
  name: user-mgmt    # Name of the kubernetes resource
  labels:                     # Labels that will be applied to this resource
    app: user-mgmt
spec:                         
  type: NodePort              # The service will be exposed by opening a Port on each node and proxying it. 
  selector:
    app: user-mgmt   # The service exposes Pods with label `app=user-mgmt`
  ports:                      # Forward incoming connections on port 8080 to the target port 8080
  - name: http
    port: 8091
    targetPort: 8091
