version: '3'
services:
  ##### USER MANAGEMENT SERVICE ###### 
  mysql-user-mgmt:
    image: mysql:8.0.19
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=root@123
      - MYSQL_DATABASE=UserManagement
    ports:
      - "3307:3306"
    volumes:
      - ./docker_volumes/user-mgmt/user_mgmt_db_data:/var/lib/mysql
  user-mgmt:
    image: user-mgmt-image
    ports:
      - "8091:8091"
    build:
      context: ./user-mgmt-service
      dockerfile: DockerFile
    depends_on:
      - mysql-user-mgmt
    restart: always


  ##### FRONT-END ###### 
  ui:
    image: ui-image
    ports:
      - "3000:3000"
    build:
      context: ./ui
      dockerfile: DockerFile
    restart: always


  ##### API GATEWAY ###### 
  gateway:
    image: gateway-image
    ports:
      - "3001:3001"
    build:
      context: ./apigateway
      dockerfile: DockerFile
    restart: always
    
  ##### IMAGE UPLOAD SERVICE ######       
  mysql-upload-mgmt:
    image: mysql:8.0.19
    restart: always
    command: --max_allowed_packet=67108864
    environment:
      - MYSQL_ROOT_PASSWORD=root@123
      - MYSQL_DATABASE=mainphotoupload
      - MYSQL_TCP_PORT=3308
    ports:
      - "3308:3308"
    volumes:
      - ./docker_volumes/upload-mgmt/upload_mgmt_db_data:/var/lib/mysql
    expose:
      - 3308      
  upload-mgmt:
    image: upload-mgmt-image
    ports:
      - "8092:8092"
    build:
      context: ./image-upload-service
      dockerfile: DockerFile
    depends_on:
      - mysql-upload-mgmt
    restart: always
    
  ##### KAFKA ######    
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
    - "2181:2181"
  kafka:
    image: wurstmeister/kafka:2.11-2.0.0
    depends_on:
    - zookeeper
    ports:
    - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "test1:1:1, test2:1:1"
      KAFKA_MESSAGE_MAX_BYTES: 30000000 
    volumes:
      - ./docker_volumes/kafka/kafka_data:/var/lib/mysql

  #  djangoooooo - google #

  django-google:
    image: googleupload-image
    restart: always
    ports:
      - "9000:9000" 
    expose:
      - 9000
    build:
      context: ./googleupload-image
      dockerfile: DockerFile
    # command:
    #   'python manage.py runserver 0.0.0.0:9000'

  # consumer_queue:
  #   build:
  #     context: ./googleupload-image/uploadtodrive/
  #     dockerfile: Dockerfile
  #   command: 
  #     python -u /uploadtodrive/uploadgoogle.py

  consumer_queue:
    image: myconsumer_queue
    restart: always
    ports:
      - "7000:7000" 
    expose:
      - 7000
    build:
      context: ./kafka_consumer_queue
      dockerfile: DockerFile

  ###### Metadatasearch #######

  metadata-search:
    image: metadata-search-service
    restart: always
    ports:
      - "8000:8000" 
    expose:
      - 8000
    build:
      context: ./metadata-search-service
      dockerfile: DockerFile
